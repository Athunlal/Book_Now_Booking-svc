// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookingManagementClient is the client API for BookingManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookingManagementClient interface {
	SearchTrain(ctx context.Context, in *SearchTrainRequest, opts ...grpc.CallOption) (*SearchTrainResponse, error)
	SearchCompartment(ctx context.Context, in *SearchCompartmentRequest, opts ...grpc.CallOption) (*SearchCompartmentResponse, error)
	BookTicket(ctx context.Context, in *BookTiketRequest, opts ...grpc.CallOption) (*BookTiketResponse, error)
}

type bookingManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewBookingManagementClient(cc grpc.ClientConnInterface) BookingManagementClient {
	return &bookingManagementClient{cc}
}

func (c *bookingManagementClient) SearchTrain(ctx context.Context, in *SearchTrainRequest, opts ...grpc.CallOption) (*SearchTrainResponse, error) {
	out := new(SearchTrainResponse)
	err := c.cc.Invoke(ctx, "/Booking.BookingManagement/SearchTrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingManagementClient) SearchCompartment(ctx context.Context, in *SearchCompartmentRequest, opts ...grpc.CallOption) (*SearchCompartmentResponse, error) {
	out := new(SearchCompartmentResponse)
	err := c.cc.Invoke(ctx, "/Booking.BookingManagement/SearchCompartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookingManagementClient) BookTicket(ctx context.Context, in *BookTiketRequest, opts ...grpc.CallOption) (*BookTiketResponse, error) {
	out := new(BookTiketResponse)
	err := c.cc.Invoke(ctx, "/Booking.BookingManagement/BookTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookingManagementServer is the server API for BookingManagement service.
// All implementations must embed UnimplementedBookingManagementServer
// for forward compatibility
type BookingManagementServer interface {
	SearchTrain(context.Context, *SearchTrainRequest) (*SearchTrainResponse, error)
	SearchCompartment(context.Context, *SearchCompartmentRequest) (*SearchCompartmentResponse, error)
	BookTicket(context.Context, *BookTiketRequest) (*BookTiketResponse, error)
	mustEmbedUnimplementedBookingManagementServer()
}

// UnimplementedBookingManagementServer must be embedded to have forward compatible implementations.
type UnimplementedBookingManagementServer struct {
}

func (UnimplementedBookingManagementServer) SearchTrain(context.Context, *SearchTrainRequest) (*SearchTrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTrain not implemented")
}
func (UnimplementedBookingManagementServer) SearchCompartment(context.Context, *SearchCompartmentRequest) (*SearchCompartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchCompartment not implemented")
}
func (UnimplementedBookingManagementServer) BookTicket(context.Context, *BookTiketRequest) (*BookTiketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookTicket not implemented")
}
func (UnimplementedBookingManagementServer) mustEmbedUnimplementedBookingManagementServer() {}

// UnsafeBookingManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookingManagementServer will
// result in compilation errors.
type UnsafeBookingManagementServer interface {
	mustEmbedUnimplementedBookingManagementServer()
}

func RegisterBookingManagementServer(s grpc.ServiceRegistrar, srv BookingManagementServer) {
	s.RegisterService(&BookingManagement_ServiceDesc, srv)
}

func _BookingManagement_SearchTrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingManagementServer).SearchTrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Booking.BookingManagement/SearchTrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingManagementServer).SearchTrain(ctx, req.(*SearchTrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingManagement_SearchCompartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchCompartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingManagementServer).SearchCompartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Booking.BookingManagement/SearchCompartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingManagementServer).SearchCompartment(ctx, req.(*SearchCompartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookingManagement_BookTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookTiketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookingManagementServer).BookTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Booking.BookingManagement/BookTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookingManagementServer).BookTicket(ctx, req.(*BookTiketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookingManagement_ServiceDesc is the grpc.ServiceDesc for BookingManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookingManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Booking.BookingManagement",
	HandlerType: (*BookingManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchTrain",
			Handler:    _BookingManagement_SearchTrain_Handler,
		},
		{
			MethodName: "SearchCompartment",
			Handler:    _BookingManagement_SearchCompartment_Handler,
		},
		{
			MethodName: "BookTicket",
			Handler:    _BookingManagement_BookTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/booking.proto",
}
